/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        int carryOver = 0, currSum = 0;
        
        ListNode l3 = new ListNode(0);
        ListNode result = l3;
        
        while(l1 != null && l2 != null)
        {
            
            currSum = l1.val + l2.val + carryOver;
            carryOver = currSum / 10;
            currSum = currSum % 10;
            l3.val = currSum;
            System.out.println(l3.val);
            l1 = l1.next;
            l2 = l2.next;
            if(l1 != null || l2 != null){
                l3.next = new ListNode(0);
                l3 = l3.next;
            }
        }
        
        while(l1 != null)
        {
            currSum = l1.val + carryOver;
            carryOver = currSum /10;
            currSum = currSum % 10;
            l3.val = currSum;
            System.out.println(l3.val);
            l1 = l1.next;
            if(l1 != null){
                l3.next = new ListNode(0);
                l3 = l3.next;
            }
            
        }
        
        while(l2 != null)
        {
            currSum = l2.val + carryOver;
            carryOver = currSum /10;
            currSum = currSum % 10;
            l3.val = currSum;
            System.out.println(l3.val);
            l2 = l2.next;
            if(l2 != null) {
                l3.next = new ListNode(0);
                l3 = l3.next;
            }
        }
        
        if(carryOver > 0)
        {
            l3.next = new ListNode(0);
            l3 = l3.next;
            while(carryOver != 0)
            {
                l3.val = carryOver % 10;
                System.out.println(l3.val);
                carryOver /= 10;
                if(carryOver > 0) {
                    l3.next = new ListNode(0);
                    l3 = l3.next;
                }
            }
        }
     return result;   
    }
}
